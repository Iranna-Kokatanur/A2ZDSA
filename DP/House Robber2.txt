https://leetcode.com/problems/house-robber-ii/submissions/

// O(N) , O(1)

import java.util.*;
class TUF{
static long solve(ArrayList<Integer> arr){
    int n = arr.size();
    long prev = arr.get(0);
    long prev2 =0;
    
    for(int i=1; i<n; i++){
        long pick = arr.get(i);
        if(i>1)
            pick += prev2;
        long nonPick = 0 + prev;
        
        long cur_i = Math.max(pick, nonPick);
        prev2 = prev;
        prev= cur_i;
        
    }
    return prev;
}

static long robStreet(int n, ArrayList<Integer> arr){
    ArrayList<Integer> arr1=new ArrayList<>();
    ArrayList<Integer> arr2=new ArrayList<>();

    if(n==1)
       return arr.get(0);
    
    for(int i=0; i<n; i++){
        
        if(i!=0) arr1.add(arr.get(i));
        if(i!=n-1) arr2.add(arr.get(i));
    }
    
    long ans1 = solve(arr1);
    long ans2 = solve(arr2);
    
    return Math.max(ans1,ans2);
}


public static void main(String args[]) {

  ArrayList<Integer> arr=new ArrayList<>();
  arr.add(1);
  arr.add(5);
  arr.add(1);
  arr.add(2);
  arr.add(6);
  int n=arr.size();
  System.out.println(robStreet(n,arr));

}
}





// MY SOLUTION

class Solution {
    
    public int solve(int ind, int[] nums, int[] dp){

        // When it reaches first element
        if(ind == 1) return nums[ind];

        if(ind < 1) return 0;
        // Adjcent element sum
        //pick the element 
        if(dp[ind] != -1) return dp[ind];
        
        int left = nums[ind] + solve(ind-2, nums, dp);

        // not pick the element
        int right = 0 + solve(ind - 1, nums, dp);

        return dp[ind] = Math.max(left, right);
    }

    public int solve2(int ind, int[] nums, int[] dp){
        // When it is reaches index 0
        if(ind == 0) return nums[ind];

        if(ind < 0) return 0;
        // Adjcent element sum
        //pick the element 
        if(dp[ind] != -1) return dp[ind];
        
        int left = nums[ind] + solve2(ind-2, nums, dp);

        // not pick the element
        int right = 0 + solve2(ind - 1, nums, dp);

        return dp[ind] = Math.max(left, right);
    }


    public int rob(int[] nums) {

        if(nums.length == 1) return nums[0];

        int dp[] = new int[nums.length];

        Arrays.fill(dp, -1);

        // First and last element are adjacent so,

        
        // solve from indx = 1 to n -1 

        int left = solve(nums.length - 1, nums, dp);

        Arrays.fill(dp, -1);

        // solve from indx = 0 to n - 2 

        int right = solve2(nums.length - 2, nums, dp);

        // Take max of it

        return Math.max(left, right);
    }
}
