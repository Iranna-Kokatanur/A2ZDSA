https://leetcode.com/problems/longest-increasing-subsequence/description/

class Solution {


    // Time complexity - o(2^n), o(n)
    public int solve(int i, int prev, int[] nums){

        if(i == nums.length) return 0;

        // pick it, if prev == -1 or the current ele > prev ele 

        int profit = 0;

        if(prev == -1 || nums[i] > nums[prev]) profit =  1 + solve(i+1, i, nums);

        // not pick 

        return Math.max(profit, solve(i+1, prev, nums));
    }

    // Memoization - o(n * n), o(n * n) + o(n)
    public int solve(int i, int prev, int[] nums, int[][] dp){

        if(i == nums.length) return 0;

        if(dp[i][prev + 1] != -1) return dp[i][prev + 1];

        // pick it, if prev == -1 or the current ele > prev ele 

        int profit = 0;

        if(prev == -1 || nums[i] > nums[prev]) profit =  1 + solve(i+1, i, nums, dp);

        // not pick 

        return dp[i][prev + 1] = Math.max(profit, solve(i+1, prev, nums,dp));
    }


    // Tabulation - o(n * n), o(n * n)
    public int solve(int[] nums, int[][] dp){


        // Since the base case is filling the value is 0, we are doing it in main method


        int n = nums.length;

        for(int i = n - 1; i>=0; i--){
            // Prev is the index - 1, and we are second parameter in index + 1 position, so, add +1 to second param in dp
            for(int prev = i - 1; prev >= -1; prev--){
                int profit = 0;
                if(prev == -1 || nums[i] > nums[prev]) profit =  1 + dp[i+1][i+1];
                
                profit = Math.max(profit, dp[i+1][prev+1]);

                dp[i][prev+1]  = profit;
            }
        }

        return dp[0][-1+1];
    }

    public int solve(int[] nums){

        // Since the base case is filling the value is 0, we are doing it 

        int n = nums.length;

        int[] cur = new int[n+1];
        int [] next = new int[n+1];

        Arrays.fill(cur, 0);
        Arrays.fill(next, 0);

        for(int i = n - 1; i>=0; i--){
            // Prev is the index - 1, and we are second parameter in index + 1 position, so, add +1 to second param in dp
            for(int prev = i - 1; prev >= -1; prev--){
                int profit = 0;
                if(prev == -1 || nums[i] > nums[prev]) profit =  1 + next[i+1];
                
                profit = Math.max(profit, next[prev+1]);

                cur[prev+1]  = profit;
            }
            next = cur;
        }

        return next[-1+1];
    }

    public int lengthOfLIS(int[] nums) {
    
        // return solve(0, -1, nums);   

        // ---------

        int n = nums.length;


        // index, prev = -1 we can store this in 0th index so, -1..........n we can store in 0..........n+1
        // int[][] dp = new int[n][n+1];
        
        // for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(0, -1, nums, dp);

        //-------------

        // int[][] dp = new int[n+1][n+1];

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(nums, dp);

        //----------

        return solve(nums);
    }
}
