https://leetcode.com/problems/longest-increasing-subsequence/description/

public int lengthOfLIS(int[] nums) {
int n = nums.length;

		int[] dp = new int[n];

		Arrays.fill(dp, 1);

		// Initially fill all the elements in the array with 1

		// Just compare the current index  with all its previous indices
		// subsequence length, if  arr[prev] < arr[index]
		// so, take max(1+ arr[prev], arr[index])


        // Just remembering the previous subsequence length and adding it to the current index

        // Tabulation approach -> Time complexity (o(n * n)), space complexity -> o(n)

		int maxi = 0;

		for(int i = 0; i<n; i++){
			for(int prev = 0; prev < i; prev++){

				if(nums[prev] < nums[i]){
					dp[i] = Math.max(1+dp[prev], dp[i]);
				}

			}

			maxi = Math.max(maxi, dp[i]);

		}

		return maxi;
}
