https://leetcode.com/problems/largest-divisible-subset/description/

class Solution {
    

    // Time complexity -> o(n * n), o(n)
    public List<Integer> largestDivisibleSubset(int[] nums) {

        // As subset is not follow order, we can sort the elements to find the largest divisible subset

        Arrays.sort(nums);
        
        int n = nums.length;

		int[] dp = new int[n];

        int[] hash = new int[n];

		Arrays.fill(dp, 1);

        int maxi = 0;

        int lastindex = 0;

        // condition is arr[i] % arr[prev] == 0 and if the dp[i] < dp[prev] + 1 

        // Initially fill all the elements in the array with 1

		// Just compare the current index  with all its previous indices

		for(int i = 0; i<n; i++){
            hash[i] = i;
			for(int prev = 0; prev < i; prev++){

				if(nums[i] % nums[prev] == 0 && 1 + dp[prev] > dp[i]){
					dp[i] = 1+dp[prev];
                    hash[i] = prev;
				}

			}

			if(dp[i] > maxi){
                maxi = dp[i];
                lastindex = i;
            }

		}

		List<Integer> ans = new ArrayList<>();

        ans.add(nums[lastindex]);
        while(hash[lastindex] != lastindex){
            lastindex = hash[lastindex];
            ans.add(nums[lastindex]);
        }

        Collections.reverse(ans);

        return ans;

    }
}
