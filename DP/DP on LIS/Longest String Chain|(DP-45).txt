https://leetcode.com/problems/longest-string-chain/description/

class Solution {

    /**
            Time Complexity: O(N*N * l)

            Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the         longest string in the words [ ] array. Also, we are sorting so the time complexity will be (N^2 * l + NlogN)

            Space Complexity: O(N)

            Reason: We are only using a single array of size n.
    
    
     */

    static boolean compare(String s1, String s2) {
        if (s1.length() != s2.length() + 1) {
            return false;
        }

        int first = 0;
        int second = 0;

        while (first < s1.length()) {
            if (second < s2.length() && s1.charAt(first) == s2.charAt(second)) {
                first++;
                second++;
            } else {
                first++;
            }
        }

        return first == s1.length() && second == s2.length();
    }

    public int longestStrChain(String[] words) {

        // It is not the subsequence they said, we can sort the elements of words

        Arrays.sort(words, (str1, str2) -> Integer.compare(str1.length(), str2.length()));

        int n = words.length;

		int[] dp = new int[n];

		Arrays.fill(dp, 1);

        // Initially fill all the elements in the array with 1

		// Just compare the current index with all its previous indices, that the previous string and current string is differed 

        // by 1 and 1 + dp[prev] > dp[i]

        int maxi = 0;

		for(int i = 0; i<n; i++){

			for(int prev = 0; prev < i; prev++){

				if(compare(words[i], words[prev]) && 1 + dp[prev] > dp[i]){
					dp[i] = 1 + dp[prev];
				}

			}

			if(dp[i] > maxi){
                maxi = dp[i];
            }

		}

        return maxi;
    }
}
