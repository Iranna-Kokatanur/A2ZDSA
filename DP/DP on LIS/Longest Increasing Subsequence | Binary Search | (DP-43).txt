https://www.codingninjas.com/studio/problems/longest-increasing-subsequence_630459?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

// Time complexity -> o(n logn), space -> o(n)
public class Solution {

	public static int longestIncreasingSubsequence(int arr[]) {
		
		/*

			[1, 7, 8, 4, 4, 5]

			we can add the element which are greater than previous elements

			here we can add [1, 7, 8]

			when it comes to 4 it is less than 8, just find the position using binary search in [1, 7, 8]

			where it can fit. now the position ele is 7 because 1 > 4 & 4 < 7

			so, now arr = [1, 4, 8]

			next element 4, find it is < 8 find it's position using Binary search, 1>4 & 4<=4, so, position ele is 4

			now arr = [1,  4, 8]

			when it comes to 5

			it is less than 8. find it's fit position using Binary search. 5 > 4 & 5 < 8

			so, pos ele is = 8

			so, arr = [1, 4, 5]

			Note: final array will not give the lis ele, just it will give the length of lis because we are replacing the elements

		*/


		List<Integer> list = new ArrayList<>();

		list.add(arr[0]);

		for(int i = 1; i<arr.length; i++){

			if(arr[i] > list.get(list.size() - 1)){
				list.add(arr[i]);
			}else{
				int ind = Collections.binarySearch(list, arr[i]);

				// Collections.binarySearch return the pos if the key is present in the array
				// else it will return the (-(insertion point)-1)

				//[1 3 4 5] key = 2 key is not present so, it will return (-1-1) = -2, insertion point is at 1st pos, 1 < 2 < 3
				if(ind < 0) ind = -ind - 1;

				list.set(ind, arr[i]);
			}
		}

		return list.size();
	}

}
