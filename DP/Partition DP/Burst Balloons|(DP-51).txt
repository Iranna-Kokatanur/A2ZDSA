https://leetcode.com/problems/burst-balloons/description/

class Solution {

    // time complexity -> Exponential
    public int solve(int i, int j, ArrayList<Integer> list){

        if(i > j) return 0;

        int maxi = Integer.MIN_VALUE;

        // We can burst any ballon
        
        // Think we have last ballon is left first, then include that in other function call

        // cost = prev * cur * future + recursion
        for(int ind = i; ind <= j; ind++){

            int cost = list.get(i - 1) * list.get(ind) * list.get(j + 1) + solve(i, ind - 1, list) 
            + solve(ind + 1, j, list);

            maxi = Math.max(maxi, cost);

        }

        return maxi;

    }

    // Memoization - time complexity = o(n3), space ->o(n2) + stack
    public int solve(int i, int j, ArrayList<Integer> list, int[][] dp){

        if(i > j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int maxi = Integer.MIN_VALUE;
        for(int ind = i; ind <= j; ind++){

            int cost = list.get(i - 1) * list.get(ind) * list.get(j + 1) + solve(i, ind - 1, list, dp) 
            + solve(ind + 1, j, list, dp);

            maxi = Math.max(maxi, cost);

        }

        return dp[i][j] = maxi;

    }

     //Tabulation time complexity = o(n3), space ->o(n2) + stack
    public int solve(int k, ArrayList<Integer> list, int n){

        int[][] dp = new int[n+2][n+2];

        for(int [] a: dp) Arrays.fill(a, 0);

        for(int i = n; i >= 1; i--){
            for(int j = 1; j <= n; j++){
                int maxi = Integer.MIN_VALUE;
                if(i > j) continue;
                 for(int ind = i; ind <= j; ind++){

                    int cost = list.get(i - 1) * list.get(ind) * list.get(j + 1) + dp[i][ind - 1] + 
                    + dp[ind + 1][j];

                    maxi = Math.max(maxi, cost);

                }

                dp[i][j] = maxi;
            }
        }

        return dp[1][n];

    }

    public int maxCoins(int[] nums) {

        int n = nums.length;

        // Inserting 1 at the start and end of the arraylist

        ArrayList<Integer> list = new ArrayList<>();

        list.add(1);

        for(int num : nums) list.add(num);

        list.add(1);

        // return solve(1, n, list);

        //---------------------------------------------

        int[][] dp = new int[n+1][n+1];

        for(int [] a: dp) Arrays.fill(a, -1);

        // return solve(1, n, list, dp);

        return solve(1, list, n);
        
    }
}
