https://www.codingninjas.com/studio/problems/matrix-chain-multiplication_624880?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION

// Tabulation - t.c o(n^3), s.c -> o(n^2)

	public static int solve(int[] prices, int[][] dp){

		int n = prices.length;

		for(int i = 1; i < n; i++) dp[i][i] = 0;


		for(int i = n - 1; i >= 1; i--){
			// J is always right to i so, start j from i + 1 not from 1

			for(int j = i + 1; j < n; j++){
				
				int min = (int)(1e9);

				for(int k = i; k < j; k++){

					int operation = prices[i - 1] * prices[k] * prices[j];

					operation += dp[i][k] + dp[k+1][j];

					min = Math.min(operation, min);

				}

				dp[i][j] = min;
			}
		}

		return dp[1][n-1];
	}

public static int mcm(int[] p){
		
		/**
			 
			 arr = [10, 15, 20, 25]

			 first matrix size = 10 * 15
			 second = 15 * 20 
			 third = 20 * 25

			 A1 * A2 = [10*15] * [15*20]

			 no of operations take to perform the multiplication is =

			 10 * 15 * 20

			 A1 * A2 * A3 = here multiplication can be performed in two ways

			 A1 * (A2 * A3) and A1 * (A2 * A3)

			 from both methods we need to check which is taking minimum no 

			 of operations to perform the multiplication
			
			and return it

			we can perform partition at each index starting from 1 to length - 1

			perform the multiplication

			(A1 * A2) * A3 = operation + recursion(A1 * A2)

			A1 * (A2 * A3) = operation + recursion(A2 * A3)

			dimension of A = A[i - 1]* A[i] where i starts from 1

		*/


		// return solve(1, p.length - 1, p);

		// ------------

		int n = p.length;

		int[][] dp = new int[n][n];

		// for(int [] a: dp) Arrays.fill(a, -1);

		// return solve(1, n - 1, p, dp);

		//------------------

		for(int [] a: dp) Arrays.fill(a, 0);

		return solve(p, dp);


	}
