https://www.codingninjas.com/studio/problems/matrix-chain-multiplication_624880?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM

import java.util.Arrays;
public class Solution {

	// Time complexity => exponential
	public static int solve(int i, int j, int[] prices){

		if(i == j) return 0;

		// Do the partitions from 1 to prices length - 1

		int min = (int)(1e9 + 7);

		for(int k = i; k < j; k++){

			//[15 30 45] => [15 * 30] * [30 * 45]

			// operation => 15 * 30 * 45 => prices[1 - 1] * prices[1] * prices[3 - 1] + recur(1, 1) + recur(2, 2)

			int operation = prices[i - 1] * prices[k] * prices[j];

			operation += solve(i, k, prices) + solve(k + 1, j, prices);

			min = Math.min(operation, min);
 		}

		return min;
	}

	// DP - Memoization-> t.c o(n^3), s.c -> o(n^2) + o(n)

	public static int solve(int i, int j, int[] prices, int[][] dp){

		if(i == j) return 0;

		// Do the partitions from 1 to prices length - 1

		if(dp[i][j] != -1) return dp[i][j];

		int min = (int)(1e9 + 7);

		for(int k = i; k < j; k++){

			//[15 30 45] => [15 * 30] * [30 * 45]

			// operation => 15 * 30 * 45 => prices[1 - 1] * prices[1] * prices[3 - 1] + recur(1, 1) + recur(2, 2)

			int operation = prices[i - 1] * prices[k] * prices[j];

			operation += solve(i, k, prices, dp) + solve(k + 1, j, prices, dp);

			min = Math.min(operation, min);
 		}

		return dp[i][j] = min;
	}

	public static int mcm(int[] p){
		
		/**
			 
			 arr = [10, 15, 20, 25]

			 first matrix size = 10 * 15
			 second = 15 * 20 
			 third = 20 * 25

			 A1 * A2 = [10*15] * [15*20]

			 no of operations take to perform the multiplication is =

			 10 * 15 * 20

			 A1 * A2 * A3 = here multiplication can be performed in two ways

			 A1 * (A2 * A3) and A1 * (A2 * A3)

			 from both methods we need to check which is taking minimum no 

			 of operations to perform the multiplication
			
			and return it

			we can perform partition at each index starting from 1 to length - 1

			perform the multiplication

			(A1 * A2) * A3 = operation + recursion(A1 * A2)

			A1 * (A2 * A3) = operation + recursion(A2 * A3)

			dimension of A = A[i - 1]* A[i] where i starts from 1

		*/


		// return solve(1, p.length - 1, p);

		int n = p.length;

		int[][] dp = new int[n][n];

		for(int [] a: dp) Arrays.fill(a, -1);

		return solve(1, n - 1, p, dp);


	}


	
}
