https://leetcode.com/problems/minimum-cost-to-cut-a-stick/description/

class Solution {

    // Recursion - exponential
    public int solve(int i, int j, ArrayList<Integer> list){

        if(i > j) return 0;

        int ans = Integer.MAX_VALUE;

        // cutting the stick from i to j
        for(int ind = i; ind <= j; ind++){

            int length = list.get(j + 1) - list.get(i - 1) + solve(i, ind - 1, list) + solve(ind + 1, j, list);

            ans = Math.min(ans, length);

        }

        return ans;

    }

    //Time Complexity: O(N*N*N)

    // Space Complexity: O(N*N) + stack
    public int solve(int i, int j, ArrayList<Integer> list, int[][] dp){

        if(i > j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int ans = Integer.MAX_VALUE;

        for(int ind = i; ind <= j; ind++){

            int length = list.get(j + 1) - list.get(i - 1) + solve(i, ind - 1, list, dp) + solve(ind + 1, j, list, dp);

            ans = Math.min(ans, length);

        }

        return dp[i][j] = ans;

    }

    //Time Complexity: O(N*N*N)

    // Space Complexity: O(N*N)
    public int solve(int n, ArrayList<Integer> list, int c){

        int[][] dp = new int[c+2][c+2];

        for(int [] a: dp) Arrays.fill(a, 0);

        for(int i = c; i >= 1; i--){
            for(int j = 1; j <= c; j++){
                // Base case
                if(i > j) continue;
                int ans = Integer.MAX_VALUE;
                for(int ind = i; ind <= j; ind++){
                    int length = list.get(j+1) - list.get(i - 1) + dp[i][ind - 1] + dp[ind + 1][j];
                    ans = Math.min(ans, length); 
                }
                dp[i][j] = ans;
            }
        }

        return dp[1][c];
    }

    public int minCost(int n, int[] cuts) {

        ArrayList<Integer> list = new ArrayList<>();

        for(int num : cuts) list.add(num);

        int c = list.size();

        // Adding 0 and n - size of stick
        list.add(n);
        list.add(0);

        // sorting the list 
        Collections.sort(list);

        // return solve(1, c, list);

        //-------------------------------------------

        int[][] dp = new int[c+1][c+1];

        for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(1, c, list, dp);

        //-------------------------

        return solve(n, list, c);
        
    }
}
