https://leetcode.com/problems/wildcard-matching/description/


class Solution {

    public int solve(int i, int j, String s, String p){

        // if both became empty then both are matching
        if(i < 0 && j < 0) return 1;

        // If first string is empty

        if(i < 0 && j >= 0) return 0;

        // if second string is empty, then we need to check first string has only * otherwise return 0

        if(j < 0 && i >= 0){
            for(int k = 0; k <= i; k++){
                if(s.charAt(k) != '*') return 0;
            }

            return 1;
        }

        // If both chars are matching or s[i] == '?' means any single char then call for rest recursion
        if(s.charAt(i) == p.charAt(j) || s.charAt(i) == '?') return solve(i - 1, j - 1, s, p);

        // * - multiple chars
        if(s.charAt(i) == '*'){
            // we can neglect the *, and call the recursion for the rest, j will not change

            int ans = solve(i-1, j, s, p);

            // we can include *, exclude one char from p so that it will reduce its string

            // abc*f, abcdef , * can match with any number of chars so, we can reduce p by j - 1

            int ans1 = solve(i, j - 1, s, p);

            return ans | ans1;

        }

        return 0;

    }

    // Memoization
    public int solve(int i, int j, String s, String p, int[][] dp){

        // if both became empty then both are matching
        if(i == 0 && j == 0) return 1;

        // If first string is empty

        if(i == 0 && j > 0) return 0;

        // if second string is empty, then we need to check first string has only * otherwise return 0

        if(j == 0 && i > 0){
            for(int k = 0; k < i; k++){
                if(s.charAt(k) != '*') return 0;
            }

            return 1;
        }

        if(dp[i][j] != -1) return dp[i][j];

        // If both chars are matching or s[i] == '?' means any single char then call for rest recursion
        if(s.charAt(i-1) == p.charAt(j-1) || s.charAt(i-1) == '?') return solve(i - 1, j - 1, s, p, dp);

        // * - multiple chars
        if(s.charAt(i-1) == '*'){
            // we can neglect the *, and call the recursion for the rest, j will not change

            int ans = solve(i-1, j, s, p, dp);

            // we can include *, exclude one char from p so that it will reduce its string

            // abc*f, abcdef , * can match with any number of chars so, we can reduce p by j - 1

            int ans1 = solve(i, j - 1, s, p, dp);

            return dp[i][j] = ans | ans1;

        }

        return dp[i][j] = 0;

    }

    // Tabulation
    public int solve(int l1, int l2, String s, int[][] dp, String p){

        dp[0][0] = 1;

        for(int j = 1; j<=l2; j++) dp[0][j] = 0;
        
        for(int i = 1; i<=l1; i++){
            int f1 = 1;
            for(int k = 0; k < i; k++){
                if(s.charAt(k) != '*') f1 = 0;
            }
            dp[i][0] = f1;
        }

        for(int i = 1; i<=l1; i++){
            for(int j = 1; j<=l2; j++){
                if(s.charAt(i-1) == p.charAt(j-1) || s.charAt(i-1) == '?') dp[i][j] = dp[i - 1][j - 1];
                else if(s.charAt(i-1) == '*'){
                    int ans = dp[i-1][j];
                    int ans1 = dp[i][j - 1];
                    dp[i][j] = ans | ans1;
                }
                else dp[i][j] = 0;
            }
        }

        return dp[l1][l2];
    }

    public int solve(int l1, int l2, String s, int[] dp, String p){

        dp[0] = 1;

        for(int j = 1; j<=l2; j++) dp[j] = 0;

        for(int i = 1; i<=l1; i++){
            int[] cur = new int[l2+1];
            int f1 = 1;
            for(int k = 0; k < i; k++){
                if(s.charAt(k) != '*') f1 = 0;
            }
            cur[0] = f1;
            for(int j = 1; j<=l2; j++){
                if(s.charAt(i-1) == p.charAt(j-1) || s.charAt(i-1) == '?') cur[j] = dp[j - 1];
                else if(s.charAt(i-1) == '*'){
                    int ans = dp[j];
                    int ans1 = cur[j - 1];
                    cur[j] = ans | ans1;
                }
                else cur[j] = 0;
            }
            dp = cur;
        }

        return dp[l2];
    }
    public boolean isMatch(String s, String p) {
        
        int l1 = s.length();
        int l2 = p.length();

        // return solve(l2-1, l1-1, p, s) == 1;

        //------
        // int[][] dp = new int[l2+1][l1+1];

        // for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(l2, l1, p, s, dp) == 1;

        //-------

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(l2, l1, p, dp, s) == 1;
        
        //-------

        int[] dp = new int[l1+1];

        Arrays.fill(dp, 0);

        return solve(l2, l1, p, dp, s) == 1;

    }
}
