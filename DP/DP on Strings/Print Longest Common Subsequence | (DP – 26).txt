https://www.codingninjas.com/studio/problems/print-longest-common-subsequence_8416383?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM

// It is same as the Longest consecutive subsequence but adding extra logic to print it
import java.util.Arrays;
public class Solution {

    // Tabulation -> o(n1 * n2), o(n1 * n2)
    public static String lcs(int[][] dp, int n1, int n2, String text1, String text2){

        // Base case
        for(int i = 0; i<=n1; i++){
            dp[i][0] = 0;
        }

        for(int i = 0; i<=n2; i++){
            dp[0][i] = 0;
        }

        for(int index1 = 1; index1 <= n1; index1++){
            for(int index2 = 1; index2 <= n2; index2++){
                if(text1.charAt(index1 - 1) == text2.charAt(index2 - 1))
                    dp[index1][index2] = 1+ dp[index1 - 1][index2 - 1];
                else {
                    int first = dp[index1 - 1][index2];
                    int second = dp[index1][index2 - 1];
                    dp[index1][index2] = Math.max(first, second);
                }
                
            }
        }

        // return dp[n1][n2];

        int i = n1, j = n2;
        
        String ans = "";

        // if characters are matching then add it to the ans otherwise go for else part
        while(i > 0 && j > 0){
            if(text1.charAt(i-1) == text2.charAt(j-1)){
                ans += text1.charAt(i); i--; j--;
            }else if(dp[i - 1][j] > dp[i][j - 1]){
                i--;
            }else{
                j--;
            }
        }

        return ans;
    }
    public static String findLCS(int n1, int n2, String text1, String text2){
        // Write your code here.
        int[][] dp = new int[n1 + 1][n2 + 1];

        for(int[] a: dp) Arrays.fill(a, -1);

        return lcs(dp, n1, n2, text1, text2);
    }
}
