class Solution {

    /**         
            // count the distinct subsequences of s2 from s1
            
            if j < 0 means mathing is completed so, return 1

            when i < 0 means no matching left so, return 0

              i                 j
            s1 = rabbbit s2 = rabbit

            firstcase -> when char matches reduce i and j
            secondcase -> whem char matches, lets not take first occurance of it, just reduce the i so that
            we can find other occurance I mean s[i] = t[j]

            if characters are not matching just reduce the i then match
    
     */

    // Recursion -> T.C -> o(2 ^ m * 2 ^ n) S.C -> o(n + m)
    private int function(int i, int j, String s, String t){

        if(j < 0) return 1;
        if(i < 0) return 0;
        
        if(s.charAt(i) == t.charAt(j)){
            
            // take the current i into consideration
            int ans1 = function(i - 1, j - 1, s, t);

            // go for other occurance of t[j] in s by reducing i
            int ans2 = function(i - 1, j, s, t);

            return ans1 + ans2;
        }else{

            // If the character is not matching just reduce i until s[i] matches with t[j]

            return function(i - 1, j, s, t);

        }

    }

    // DP -> MEMOIZATION  o(n * m) s.c -> o(n + m) + o(n * m)
    // Using 1 based index -> because instead of i<0 we can move +1 to index so, we can check for i == 0
    //  instead of i < 0
    private int function(int i, int j, String s, String t, int[][] dp){

        if(j == 0) return 1;
        if(i == 0) return 0;

        if(dp[i][j] != -1) return dp[i][j];
        
        if(s.charAt(i-1) == t.charAt(j-1)){
            
            // take the current i into consideration
            int ans1 = function(i - 1, j - 1, s, t, dp);

            // go for other occurance of t[j] in s by reducing i
            int ans2 = function(i - 1, j, s, t, dp);

            return dp[i][j] = ans1 + ans2;
        }else{

            // If the character is not matching just reduce i until s[i] matches with t[j]

            return dp[i][j] = function(i - 1, j, s, t, dp);

        }

    }

    // Tabulation -> o(n * m) s.c -> o(n * m)

    private int function(int[][] dp, int n1, int n2, String s, String t){

        // Write basecases

        for(int i = 0; i<=n1; i++){
            dp[i][0] = 1;
        }

        for(int j = 1; j<=n2; j++){
            dp[0][j] = 0;
        }

        for(int i = 1; i<= n1; i++){
            for(int j = 1; j<=n2; j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
            
                    // take the current i into consideration
                    int ans1 = dp[i - 1][j - 1];

                    // go for other occurance of t[j] in s by reducing i
                    int ans2 = dp[i - 1][j];

                    dp[i][j] = ans1 + ans2;
                }else{
                    dp[i][j] = dp[i - 1][j];
                }             
            }
        }

        return dp[n1][n2];
    }
    
    // Space Optimization -> o(n * m) s.c -> o(m)

    private int function(int[] dp, int n1, int n2, String s, String t){

        // Write basecases

        dp[0] = 1;

        for(int i = 1; i<= n1; i++){
            int[] temp = new int[n2 + 1];
            Arrays.fill(temp, 0);
            temp[0] = 1;
            for(int j = 1; j<=n2; j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
            
                    // take the current i into consideration
                    int ans1 = dp[j - 1];

                    // go for other occurance of t[j] in s by reducing i
                    int ans2 = dp[j];

                    temp[j] = ans1 + ans2;
                }else{
                    temp[j] = dp[j];
                }             
            }

            dp = temp;
        }

        return dp[n2];
    }

    // Space Optimization using 1D-> o(n * m) s.c -> o(m)

    private int functionUsing1D(int[] dp, int n1, int n2, String s, String t){

        // Write basecases

        dp[0] = 1;

        for(int i = 1; i<= n1; i++){
            for(int j = n2; j>=1; j--){
                if(s.charAt(i-1) == t.charAt(j-1)){
            
                    // take the current i into consideration
                    int ans1 = dp[j - 1];

                    // go for other occurance of t[j] in s by reducing i
                    int ans2 = dp[j];

                    dp[j] = ans1 + ans2;
                }else{
                    dp[j] = dp[j];
                }             
            }
        }

        return dp[n2];
    }

    public int numDistinct(String s, String t) {
        
        int l1 = s.length();
        int l2 = t.length();

        // return function(l1 - 1, l2 - 1, s, t);

        // -------------------------------------------

        // int[][] dp = new int[l1 + 1][l2 + 1];

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return function(l1, l2,s, t, dp);

        //--------------------------------------------

        // return function(dp, l1, l2, s, t);

        //-----------------------------------------

        int[] dp = new int[l2+1];

        Arrays.fill(dp, 0);

        // return function(dp, l1, l2, s, t);

        // ----------------------------------------------------

        return functionUsing1D(dp, l1, l2, s, t);

    }
}
