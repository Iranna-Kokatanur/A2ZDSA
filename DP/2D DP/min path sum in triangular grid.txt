https://leetcode.com/problems/triangle/description/
// fixed starting point and variable ending point

class Solution {

    

    public int solve(int i, int j, int lastrow, List<List<Integer>> triangle){

        if(i == lastrow - 1) return triangle.get(i).get(j);

        int down = triangle.get(i).get(j) + solve(i + 1, j, lastrow, triangle);

        int diagonal = triangle.get(i).get(j) + solve(i + 1, j + 1, lastrow, triangle);

        return Math.min(down, diagonal);
    }

    // Time Complexity: O(N*N)

    // Space Complexity: O(N*N) + stack
    public int solve(int i, int j, int lastrow, List<List<Integer>> dp, List<List<Integer>> triangle){

        if(i == lastrow - 1) return triangle.get(i).get(j);

        if(dp.get(i).get(j) != -1) return dp.get(i).get(j);

        int down = triangle.get(i).get(j) + solve(i + 1, j, lastrow, dp, triangle);

        int diagonal = triangle.get(i).get(j) + solve(i + 1, j + 1, lastrow, dp, triangle);

        dp.get(i).set(j, Math.min(down, diagonal));

        return dp.get(i).get(j);
    }
    
    
    public int solve2(int k, int l, int lastrow, List<List<Integer>> dp, List<List<Integer>> triangle){  

        int n = lastrow;

        for(int i = n - 1; i >= 0; i--){
            int m = triangle.get(i).size();
            for(int j = m - 1; j >= 0; j--){
                int down = triangle.get(i).get(j), diagonal = triangle.get(i).get(j);
                if(i + 1 < n){
                    down += dp.get(i + 1).get(j);
                    diagonal += dp.get(i + 1).get(j + 1);
                }
               dp.get(i).set(j, Math.min(down, diagonal));
            }
        }

        return dp.get(k).get(l);

    }

    // Time Complexity: O(N*N)

    // Space Complexity: O(N*N)
    public int solve3(int k, int l, int lastrow, List<List<Integer>> dp, List<List<Integer>> triangle){  

        int n = lastrow;

        for(int j = 0; j < triangle.get(n-1).size(); j++){
            dp.get(n-1).set(j, triangle.get(n-1).get(j));
        }
        for(int i = n - 2; i >= 0; i--){
            int m = triangle.get(i).size();
            for(int j = i; j >= 0; j--){
                int down = triangle.get(i).get(j), diagonal = triangle.get(i).get(j);
                down += dp.get(i + 1).get(j);
                diagonal += dp.get(i + 1).get(j + 1);
                dp.get(i).set(j, Math.min(down, diagonal));
            }
        }

        return dp.get(k).get(l);

    }

    // Time Complexity: O(N*N)

    // Space Complexity: O(N)
    public int solve4(int k, int l, int lastrow, List<Integer> dp, List<List<Integer>> triangle){  

        int n = lastrow;

        for(int i = n - 2; i >= 0; i--){
            int m = triangle.get(i).size();
            List<Integer> temp = new ArrayList<>();
            for(int j = i; j >= 0; j--){
                int down = triangle.get(i).get(j), diagonal = triangle.get(i).get(j);
                down += dp.get(j);
                diagonal += dp.get(j + 1);
                temp.add(Math.min(down, diagonal));
            }
            Collections.reverse(temp);
            dp = temp;
        }

        return dp.get(0);

    }

    public int minimumTotal(List<List<Integer>> triangle) {

        int n = triangle.size();

        // return solve(0, 0, n, triangle);

        List<List<Integer>> dp = new ArrayList<>();

        for(int i = 0; i<n; i++){
            dp.add(new ArrayList<>());
            for(int j = 0; j < triangle.get(i).size(); j++){
                dp.get(i).add(-1);
            }
        }

        // return solve(0, 0, n, dp, triangle);

        //  return solve2(0, 0, n, dp, triangle);

        // return solve3(0, 0, n, dp, triangle);

        List<Integer> temp = new ArrayList<>();

        for(int j = 0; j < triangle.get(n-1).size(); j++){
            temp.add(triangle.get(n-1).get(j));
        }
        
        return solve4(0, 0, n, temp, triangle);

    }
}
