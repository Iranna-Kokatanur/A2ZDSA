https://www.codingninjas.com/studio/problems/partitions-with-given-difference_3751628?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION

import java.util.* ;
import java.io.*; 
public class Solution {

	static int mod = (int)(1e9 + 7);

	 // Recursion : o(2 ^ n), o(n)
	public static int solve(int index, int target, int[] num){


        if(index == 0) {
			if(target == 0 && num[0] == 0) return 2;
			if(target == 0 || num[0] == target) return 1;
			return 0;
		}


        int notpick = 0;

        //not pick the element
        notpick = solve(index - 1, target, num);

        int pick = 0;

        //pickt the element
        if(num[index] <= target) pick = solve(index - 1, target - num[index], num);

        return (pick + notpick) % mod;
    }

	 // Memoization -> o(n * target), o(n * target) + o(n)
    public static int solve(int index, int target, int[][] dp, int[] num){

        if(index == 0) {
			if(target == 0 && num[0] == 0) return 2;
			if(target == 0 || num[0] == target) return 1;
			return 0;
		}

        if(dp[index][target] != -1) return dp[index][target];

        int notpick = 0;

        notpick = solve(index - 1, target, dp, num);

        int pick = 0;

        if(num[index] <= target) pick = solve(index - 1, target - num[index], dp, num);

        return dp[index][target] = (pick + notpick) % mod;
    }


	// Tabulation -> o(n * target), o(n * target)

    public static int solve(int[][] dp, int[] num, int k){

        // Base cases

        // when target is 0 

        int n = num.length;

        
        if(num[0] == 0) dp[0][0] = 2; // pick or not pick
		else dp[0][0] = 1; // one option
        

        // when index == 0
        if(num[0] != 0 && num[0] <= k){
            dp[0][num[0]] = 1;
        }

        // compute the ans

        for(int index = 1; index<n; index++){

            for(int target = 0; target <= k; target++){
                int notpick = 0;

                notpick = dp[index - 1][target];

                int pick = 0;

                if(num[index] <= target) pick = dp[index - 1][target - num[index]];

                dp[index][target] = (pick + notpick) % mod;
            }
            
        }

        return dp[n-1][k];
    }
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.

		int totalsum = 0;

		for(int num : arr) totalsum += num;

		// partitions s1, s2 s1 + s2 = totalsum

		// we need to find the count of partitions where s1 - s2 = d

		// totalsum - s2 - s2 = d

		// s2 = (totalsum - d)/2

		if(totalsum - d < 0 || (totalsum - d) % 2 == 1) return 0;

		// return solve(n - 1, (totalsum - d) / 2, arr);

		int[][] dp = new int[n][(totalsum - d) / 2 + 1];

		// for(int[] a : dp) Arrays.fill(a, -1);

		// return solve(n - 1, (totalsum - d) / 2, dp, arr);

		for(int[] a : dp) Arrays.fill(a, 0);

		return solve(dp, arr, (totalsum - d) / 2);

	}
}
