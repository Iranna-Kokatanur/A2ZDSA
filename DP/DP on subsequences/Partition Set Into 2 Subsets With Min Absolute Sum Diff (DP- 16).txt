import java.util.Arrays;

public class Solution {

    public static int solve(int[] dp, int n, int k, int[] arr){

        if (arr[0] <= k) {
            dp[arr[0]] = 1;
        }

        for(int index = 1; index<n; index++){
            dp[0] = 1;
            int temp[] = new int[k + 1];
            for(int target = 1; target <= k; target++){
                boolean nottake = false;
                nottake = dp[target] == 1;

                boolean take = false;

                if(target >= arr[index])
                    take = dp[target - arr[index]] == 1;
                
                temp[target] = (take || nottake) ? 1 : 0;
            }

            dp = temp;
        }

        // now to find the minimum sum difference

        // Iterate over 0 to target, check is that possible sum or not by checking dp array
        // then take that s1 and s2 as target - s1 and take the sum diff
        
        int ans = Integer.MAX_VALUE;

        for(int i = 0; i<=k; i++){
            if(dp[i] == 1){
                int s1 = i;
                int s2 = k - i;
                ans = Math.min(ans, Math.abs(s1 - s2));
            }
        }

        return ans;
    }
    public static int minSubsetSumDifference(int []arr, int n) {
        
        int sum = 0;

        for(int i = 0; i<n; i++) sum += arr[i];

        int[] dp = new int[sum + 1];

        Arrays.fill(dp, -1);

        return solve(dp, n, sum, arr);

    }
}
