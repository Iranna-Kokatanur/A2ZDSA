https://www.codingninjas.com/studio/problems/count-subsets-with-sum-k_3952532?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION

// when arr[i] having 0s

public static int solve(int index, int target, int[] num){

        if(index == 0)
        	if(arr[0] == 0 && sum == 0) return 2;
        	if(sum == 0 || sum == arr[0]) return 1;
        	return 0; 

        int notpick = 0;

        //not pick the element
        notpick = solve(index - 1, target, num);

        int pick = 0;

        //pickt the element
        if(num[index] <= target) pick = solve(index - 1, target - num[index], num);

        return (pick + notpick) % mod;
    }


// when arr[i] not having 0s

import java.util.*;
import java.io.*;

public class Solution {

    static int mod = (int)(1e9 + 7);

    // Recursion : o(2 ^ n), o(n)
    public static int solve(int index, int target, int[] num){

        if(target == 0) return 1;

        if(index == 0) return (num[0] == target)? 1 : 0;

        int notpick = 0;

        //not pick the element
        notpick = solve(index - 1, target, num);

        int pick = 0;

        //pickt the element
        if(num[index] <= target) pick = solve(index - 1, target - num[index], num);

        return (pick + notpick) % mod;
    }

    // Memoization -> o(n * target), o(n * target) + o(n)
    public static int solve(int index, int target, int[][] dp, int[] num){

        if(target == 0) return 1;

        if(index == 0) return (num[0] == target)? 1 : 0;

        if(dp[index][target] != -1) return dp[index][target];

        int notpick = 0;

        notpick = solve(index - 1, target, dp, num);

        int pick = 0;

        if(num[index] <= target) pick = solve(index - 1, target - num[index], dp, num);

        return dp[index][target] = (pick + notpick) % mod;
    }


     // Tabulation -> o(n * target), o(n * target)
    public static int solve(int[][] dp, int[] num, int k){

        // Base cases

        // when target is 0 

        int n = num.length;

        for(int i = 0; i<n; i++){
            dp[i][0] = 1;
        }

        // when index == 0
        if(num[0] <= k){
            dp[0][num[0]] = 1;
        }

        // compute the ans

        for(int index = 1; index<n; index++){

            for(int target = 1; target <= k; target++){
                int notpick = 0;

                notpick = dp[index - 1][target];

                int pick = 0;

                if(num[index] <= target) pick = dp[index - 1][target - num[index]];

                dp[index][target] = (pick + notpick) % mod;
            }
            
        }

        return dp[n-1][k];
    }

    // space optimization -> o(n * target), o(target)
    
    public static int solve(int[] dp, int[] num, int k){

        // Base cases

        // when target is 0 

        int n = num.length;

        // when index == 0
        if(num[0] <= k){
            dp[num[0]] = 1;
        }

        // compute the ans

        for(int index = 1; index<n; index++){
            int[] temp = new int[k+1];
            dp[0] = 1; 
            temp[0] = 1;
            for(int target = 1; target <= k; target++){
                int notpick = 0;

                notpick = dp[target];

                int pick = 0;

                if(num[index] <= target) pick = dp[target - num[index]];

                temp[target] = (pick + notpick) % mod;
            }
            dp = temp;
        }

        return dp[k];
    }

    public static int findWays(int num[], int tar) {
        // Write your code here.

        int n = num.length;
        
        // return solve(n - 1, tar, num);


        //  dp array

        // int dp[][] = new int[n][tar+1];

        //  for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(n - 1, tar, dp, num);

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(dp, num, tar);

        int[] temp = new int[tar+1];

        Arrays.fill(temp, 0);

        return solve(temp, num, tar);
    }
}
