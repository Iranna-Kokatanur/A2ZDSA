https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/

class Solution {

    // Atmost you need to buy and sell two stocks
    public int solve(int i, int buy, int cap, int[] prices){

        if(cap == 0) return 0;
        if(i == prices.length) return 0;

        int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, cap, prices);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, cap, prices));
        }else{
            // we can sell today, so we can buy tomorrow
            profit = prices[i] + solve(i+1, 1, cap - 1, prices);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, cap, prices));

        }

        return profit;
    }

    // Time complexity -> O(N*2*3), O(N*2*3) + o(N)
    public int solve(int i, int buy, int cap, int[] prices, int[][][] dp){

        if(cap == 0) return 0;
        if(i == prices.length) return 0;

        if(dp[i][buy][cap] != -1) return dp[i][buy][cap];

        int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, cap, prices, dp);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, cap, prices, dp));
        }else{
            // we can sell today, so we can buy tomorrow
            profit = prices[i] + solve(i+1, 1, cap - 1, prices, dp);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, cap, prices, dp));

        }

        return dp[i][buy][cap] = profit;
    }

    // Tabulation - O(N*2*3), O(N*2*3)
    public int solve(int[] prices, int[][][] dp, int n){

        for(int i = 0; i<=n; i++){
            for(int buy = 0; buy <= 1; buy++){
                dp[i][buy][0] = 0;
            }
        }

        for(int buy = 0; buy <= 1; buy++){
            for(int cap = 0; cap <= 2; cap++){
                dp[n][buy][cap] = 0;
            }
        }

        for(int i = n - 1; i>=0; i--){
            for(int buy = 0; buy <= 1; buy++){
                for(int cap = 1; cap <= 2; cap++){
                    int profit = 0;
                    if(buy == 1){
                        // Just buy the current stock, so you cant buy tomorrow's
                        profit = -prices[i] + dp[i+1][0][cap];

                        // don't buy the stock, tomorrow you can

                        profit = Math.max(profit, dp[i+1][1][cap]);
                    }else{
                        // we can sell today, so we can buy tomorrow
                        profit = prices[i] + dp[i+1][1][cap - 1];

                        // dont sell it, we can sell it tomorrow

                        profit = Math.max(profit, dp[i+1][0][cap]);

                    }
                    dp[i][buy][cap] = profit;
                }
            }
        }

        return dp[0][1][2];
    }


    int solve(int[] prices) {
        int n = prices.length;

        // Create a 2D array 'ahead' and 'cur' to store profit values
        int[][] ahead = new int[2][3];
        int[][] cur = new int[2][3];

        // Loop through the prices array, starting from the second last stock (ind=n-1)
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= 2; cap++) {

                    if (buy == 0) { // We can buy the stock
                        cur[buy][cap] = Math.max(0 + ahead[0][cap],
                                -prices[ind] + ahead[1][cap]);
                    }

                    if (buy == 1) { // We can sell the stock
                        cur[buy][cap] = Math.max(0 + ahead[1][cap],
                                prices[ind] + ahead[0][cap - 1]);
                    }
                }
            }

            // Update 'ahead' with the values in 'cur'
            for (int i = 0; i < 2; i++) {
                for (int j = 1; j < 3; j++) {
                    ahead[i][j] = cur[i][j];
                }
            }
        }

        // The maximum profit with 2 transactions is stored in ahead[0][2]
        return ahead[0][2];
    }

    public int maxProfit(int[] prices) {

        int n = prices.length;

        // return solve(0, 1, 2, prices);

        //--------------

        // index, buy-0,1, cap-0,1,2 
        // int[][][] dp = new int[n][2][3];

        // for (int i = 0; i < n; i++) {
        //     for (int j = 0; j < 2; j++) {
        //         Arrays.fill(dp[i][j], -1);
        //     }
        // }

        // return solve(0, 1, 2, prices, dp);

        //--------------

        // int[][][] dp = new int[n+1][2][3];

        // for (int i = 0; i <= n; i++) {
        //     for (int j = 0; j < 2; j++) {
        //         Arrays.fill(dp[i][j], 0);
        //     }
        // }
        
        // return solve(prices, dp, n);

        //-----

        return solve(prices);
    }
}
