https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/description/

class Solution {

    // We can solve using the approach of sell and buy stock - III but that will use 3d dp so, fo for this method

    // If k = 2 means we can achieve 2 * k trans, because per trans, either buy or sell we will be there

    // for every even buy will occur, and odd sell will occur

    //  for k = 2, buy sell buy sell

    //              0    1    2    3

    // when it reaches 4 exit out of it (2 * k)


    public int solve(int i, int transNo, int[] prices, int[][] dp, int k){

        if(i == prices.length || transNo == 2 * k) return 0;

        if(dp[i][transNo] != -1) return dp[i][transNo];

        int profit = 0;

        if(transNo % 2 == 0){
            profit = -prices[i] + solve(i+1, transNo+1, prices, dp, k);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, transNo, prices, dp, k));

        }else{
            
            // we can sell today, so we can buy tomorrow
            profit = prices[i] + solve(i+1, transNo+1, prices, dp, k);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, transNo, prices, dp, k));
        }

        return dp[i][transNo] = profit;
    }

    // Tabulation - o(n * 2k), o(n * 2k)

    public int solve(int[] prices, int[][] dp, int k){

        // No need to add the base cases as it is storing 0 only that we are doing in main method

        int n  = prices.length;

        for(int i = n - 1; i>=0; i--){
            for(int transNo = 2 * k - 1; transNo >= 0; transNo--){
                int profit = 0;
                if(transNo % 2 == 0){
                    profit = -prices[i] + dp[i+1][transNo+1];

                    // don't buy the stock, tomorrow you can

                    profit = Math.max(profit, dp[i+1][transNo]);

                }else{
            
                    // we can sell today, so we can buy tomorrow
                    profit = prices[i] + dp[i+1][transNo+1];

                    // dont sell it, we can sell it tomorrow

                    profit = Math.max(profit, dp[i+1][transNo]);
                }

                dp[i][transNo] = profit;
            }
        }

        return dp[0][0];

    }

    // Space Optimization - o(n * 2k), o(2k)
    public int solve(int[] prices, int k){

        // No need to add the base cases as it is storing 0 only that we are doing in main method

        int n  = prices.length;

        int[] ahead = new int[2 * k +1];

        Arrays.fill(ahead, 0);

        int[] cur = new int[2 * k + 1];

        Arrays.fill(cur, 0);

        for(int i = n - 1; i>=0; i--){
            for(int transNo = 2 * k - 1; transNo >= 0; transNo--){
                int profit = 0;
                if(transNo % 2 == 0){
                    profit = -prices[i] + ahead[transNo+1];

                    // don't buy the stock, tomorrow you can

                    profit = Math.max(profit, ahead[transNo]);

                }else{
            
                    // we can sell today, so we can buy tomorrow
                    profit = prices[i] + ahead[transNo+1];

                    // dont sell it, we can sell it tomorrow

                    profit = Math.max(profit, ahead[transNo]);
                }

                cur[transNo] = profit;
            }

            ahead = cur;
        }

        return ahead[0];

    }

    public int maxProfit(int k, int[] prices) {

        int n = prices.length;
        
        // int[][] dp = new int[n][2*k];

        // for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(0, 0, prices, dp, k);

        //--------------------
        // int[][] dp = new int[n+1][2*k+1];

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(prices, dp, k);

        //-----------------

        return solve(prices, k);
    }
}
