https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/

class Solution {
    // It is the same problem Buy and Sell Stock - II|(DP-36).txt

    // But just extra is that we need to subtract the fees while selling the stock. Directly right the space optimized code

    // Tabulation - 0(2*n), o(n * 2)
    public int solve(int n, int[] prices, int[][] dp, int fee){

        dp[n][0] = dp[n][1] = 0;

        for(int i = n - 1; i>=0; i--){
            for(int buy = 0; buy<=1; buy++){
                int profit = 0;
                if(buy == 1){
                    profit = -prices[i] + dp[i+1][0];
                    profit = Math.max(profit, dp[i+1][1]);
                }else{
                     // Just subtracting the fee while selling the stock
                    profit = prices[i] - fee + dp[i+1][1];
                    profit = Math.max(profit, dp[i+1][0]);
                }
                dp[i][buy] = profit;
            }
            
        }

        return dp[0][1];

    }

     // Space optimization -> 0(2*n), o(1)
    public int solve(int n, int[] prices, int fee){
        int[] ahead = new int[2];

        ahead[0] = ahead[1] = 0;

        for(int i = n - 1; i>=0; i--){
            int[] cur = new int[2];
            cur[0] = cur[1] = 0;
            for(int buy = 0; buy<=1; buy++){
                int profit = 0;
                if(buy == 1){
                    profit = -prices[i] + ahead[0];
                    profit = Math.max(profit, ahead[1]);
                }else{
                    // Just subtracting the fee while selling the stock
                    profit = prices[i] - fee + ahead[1];
                    profit = Math.max(profit, ahead[0]);
                }
               cur[buy] = profit;
            }
            ahead = cur;
        }

        return ahead[1];

    }

    public int maxProfit(int[] prices, int fee) {
        
        int n = prices.length;

        int[][] dp = new int[n+1][2];

        for(int[] a: dp) Arrays.fill(a, 0);

        return solve(n, prices, dp, fee);

        //-------------------

        // return solve(n, prices, fee);


    }
}
