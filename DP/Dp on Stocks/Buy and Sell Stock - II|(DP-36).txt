https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/


class Solution {

    // 2^n, o(n)
    public int solve(int i, int buy, int[] prices){


        if(i == prices.length) return 0;

        // Either we need to buy means we already need to sell the previous stocks 

        int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, prices);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, prices));
        }else{
            // we can sell today, so we can buy tomorrow
            profit = prices[i] + solve(i+1, 1, prices);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, prices));

        }

        return profit;
    }

    // DP - MEMOIZATION - o(2*n), o(2*n) + o(n)

    public int solve(int i, int buy, int[] prices, int[][] dp){


        if(i == prices.length) return 0;

        if(dp[i][buy] != -1) return dp[i][buy];

        // Either we need to buy means we already need to sell the previous stocks 


        int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, prices, dp);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, prices, dp));
        }else{
            // we can sell today, so we can buy tomorrow
            profit = prices[i] + solve(i+1, 1, prices, dp);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, prices, dp));

        }

        return dp[i][buy] = profit;
    }

    // Tabulation - 0(2*n), o(n * 2)
    public int solve(int n, int[] prices, int[][] dp){

        dp[n][0] = dp[n][1] = 0;

        for(int i = n - 1; i>=0; i--){
            for(int buy = 0; buy<=1; buy++){
                int profit = 0;
                if(buy == 1){
                    profit = -prices[i] + dp[i+1][0];
                    profit = Math.max(profit, dp[i+1][1]);
                }else{
                    profit = prices[i] + dp[i+1][1];
                    profit = Math.max(profit, dp[i+1][0]);
                }
                dp[i][buy] = profit;
            }
            
        }

        return dp[0][1];

    }

    // Space optimization -> 0(2*n), o(1)
    public int solve(int n, int[] prices){
        int[] ahead = new int[2];

        ahead[0] = ahead[1] = 0;

        for(int i = n - 1; i>=0; i--){
            int[] cur = new int[2];
            cur[0] = cur[1] = 0;
            for(int buy = 0; buy<=1; buy++){
                int profit = 0;
                if(buy == 1){
                    profit = -prices[i] + ahead[0];
                    profit = Math.max(profit, ahead[1]);
                }else{
                    profit = prices[i] + ahead[1];
                    profit = Math.max(profit, ahead[0]);
                }
               cur[buy] = profit;
            }
            ahead = cur;
        }

        return ahead[1];

    }
    public int maxProfit(int[] prices) {

        // return solve(0, 1, prices);

        // -----------

        int n = prices.length;

        // int[][] dp = new int[n][2];

        // for(int[] a: dp) Arrays.fill(a, -1);

        // return solve(0, 1, prices, dp);

        //------------------

        // int[][] dp = new int[n+1][2];

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(n, prices, dp);

        //------------

        return solve(n, prices);
        
    }
}
