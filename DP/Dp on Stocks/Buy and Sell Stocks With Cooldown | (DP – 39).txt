https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/

class Solution {
    public int solve(int i, int buy, int[] prices){

        if(i >= prices.length) return 0;

         int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, prices);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, prices));
        }else{
            // we can sell today, so you cant buy it tomorrow, go for next to next day
            profit = prices[i] + solve(i+2, 1, prices);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, prices));

        }

        return profit;
    }


    // Memoization - > o(2n), o(2n) + stack space o(n)
    public int solve(int i, int buy, int[] prices, int[][] dp){

        if(i >= prices.length) return 0;

        if(dp[i][buy] != -1) return dp[i][buy];

        int profit = 0;

        if(buy == 1){
            // Just buy the current stock, so you cant buy tomorrow's
            profit = -prices[i] + solve(i+1, 0, prices, dp);

            // don't buy the stock, tomorrow you can

            profit = Math.max(profit, solve(i+1, 1, prices, dp));
        }else{
            // we can sell today, so you cant buy it tomorrow, go for next to next day
            profit = prices[i] + solve(i+2, 1, prices, dp);

            // dont sell it, we can sell it tomorrow

            profit = Math.max(profit, solve(i+1, 0, prices, dp));

        }

        return dp[i][buy] = profit;
    }

    //Tabulation - o(2n), o(2n)

    public int solve(int[] prices, int[][] dp, int n){

        // Any way in the base case we are assigning the value as zero that we did in the main method,
        // so, no need to write the base case.

        for(int i = n - 1; i >= 0; i--){
            for(int buy = 0; buy <= 1; buy++){
                int profit = 0;
                 if(buy == 1){
                    // Just buy the current stock, so you cant buy tomorrow's
                    profit = -prices[i] + dp[i+1][0];

                    // don't buy the stock, tomorrow you can

                    profit = Math.max(profit, dp[i+1][1]);
                }else{
                    // we can sell today, so you cant buy it tomorrow, go for next to next day
                    profit = prices[i] + dp[i+2][1];

                    // dont sell it, we can sell it tomorrow

                    profit = Math.max(profit, dp[i+1][0]);

                }

                dp[i][buy] = profit;
            }
        }

        return dp[0][1];

    }

    // Space Optimization - o(2n), o(1) 
    public int solve(int[] prices, int n){

        // Any way in the base case we are assigning the value as zero that we did in the main method,
        // so, no need to write the base case.

        int[] front1 = new int[2];
        int[] front2 = new int[2];
        int[] cur = new int[2];

        Arrays.fill(front1, 0);
        Arrays.fill(front2, 0);
        Arrays.fill(cur, 0);

        for(int i = n - 1; i >= 0; i--){

            cur[1] = Math.max(-prices[i] + front1[0], front1[1]);

            cur[0] = Math.max(prices[i] + front2[1], front1[0]);

            System.arraycopy(front1, 0, front2, 0, 2);
            System.arraycopy(cur, 0, front1, 0, 2);

        }

        return cur[1];

    }

    public int maxProfit(int[] prices) {
        
        // return solve(0, 1, prices);

        //--------

        int n = prices.length;

        // int[][] dp = new int[n][2];

        // for(int [] a: dp) Arrays.fill(a, -1);

        // return solve(0, 1, prices, dp);

        //-----------

        // int[][] dp = new int[n+2][2];

        // for(int[] a: dp) Arrays.fill(a, 0);

        // return solve(prices, dp, n);

        //---

        return solve(prices, n);
    }
}
