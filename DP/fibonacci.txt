https://leetcode.com/problems/climbing-stairs/submissions/

class Solution {
    public int solve(int n){
        if(n == 0 || n == 1) return 1;

        return solve(n - 1) + solve(n - 2);
    }


    // MEMOIZATION
    public int solve2(int n, int dp[]){
        if(n == 0 || n == 1) return 1;
        if(dp[n] != -1) return dp[n];
        return dp[n] = solve2(n - 1, dp) + solve2(n - 2, dp);
    }

    //TABULATION

    public int solve3(int n, int[] dp){
        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }

    // SPACE OPTIMIZATION

    public int solve4(int n){

        int prev = 1;
        int prev1 = 1;
        for(int i = 2; i <= n; i++){
            int cur = prev + prev1;
            prev1 = prev;
            prev = cur;
        }

        return prev;
    }

    public int climbStairs(int n) {
        int[] dp = new int[n+1];

        // return solve(n);

        Arrays.fill(dp, -1);

        // return solve2(n, dp);

        // return solve3(n, dp);

        return solve4(n);

    }
}
