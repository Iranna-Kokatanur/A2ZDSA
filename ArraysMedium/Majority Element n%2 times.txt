https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1

class Solution
{
    static int majorityElement(int a[], int size)
    {   
        
        //Better Solution
        
        if(size == 0) return -1;
        if(size == 1) return a[0];
        
        // Arrays.sort(a);
        
        HashMap<Integer, Integer> ans = new HashMap<>();
        
        for(int i = 0; i<a.length; i++){
            if(ans.get(a[i]) != null){
                int cnt = ans.get(a[i]);
                ans.put(a[i], cnt+1);
            }else{
                ans.put(a[i], 1);
            }
        }
        
        for (Map.Entry<Integer,Integer> itr : ans.entrySet()){
            if(itr.getValue() > size/2) return itr.getKey();
        }
        
        return -1;
        
        
        
        
        // Moores voting algorithm
        
        // First iterate over the array and check the ele which is occuring more
        // Iterate over the array with the majority ele and check the actual count of it
        // check it is occuring more than n/2 times or not
        
        int ele = -1;
        int cnt = 0;
        
        for(int i = 0; i<a.length; i++){
            if(cnt == 0){
                cnt = 1;
                ele = a[i];
            }else if(a[i] == ele){
                cnt++;
            }else{
                cnt--;
            }
        }
        
        int newcnt = 0;
        
        for(int i = 0; i<a.length; i++){
            if(a[i] == ele){
                newcnt++;
            }
        }
        
        if(newcnt > size/2){
            return ele;
        }
        
        return -1;
    }
}
