https://www.codingninjas.com/studio/problems/prime-factorisation_1760849?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=1

import java.util.List;
import java.util.ArrayList;

public class Solution {

    public static List< Integer > countPrimes(int n) {
        // Write your code here.
        List< Integer > ans = new ArrayList<>();
        if(n < 2) return ans;
        //Sieve of Eratosthenes
        int sqrtN = (int) Math.sqrt(n);

        boolean[] primes = new boolean[n];
        //O(N log log N)
        //intially all will be false
        
        // i ranges from 2 to sqrtN, after sqrtN number will be out of range for marking
        for(int i = 2; i<=sqrtN; i++){
            // first number will get changed is i * i always
            for(int j = i * i; j < n; j+=i){
                primes[j] = true; // marking composite numbers
            }
        }

        for(int i = 2; i<n; i++){
            if(!primes[i]) {
                if(n % i == 0)
                    ans.add(i);
            }
        }

        return ans;
    }
}

