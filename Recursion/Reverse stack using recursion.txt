https://www.codingninjas.com/studio/problems/reverse-stack-using-recursion_631875?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION

import java.util.Stack;

public class Solution {
    // 2 1 3

	//o(n*n)
	public static void insertAtBottom(Stack<Integer> st, int ele){


		if(st.isEmpty()){
			st.push(ele);
			return;
		}

		// Add whatever the element new element come newly, 
		// so remove the all the elements from stack, add the element
		// at bottom and then removed elements

		int top = st.pop();
		insertAtBottom(st, ele);
		st.push(top);

	}
	public static void reverseStack(Stack<Integer> stack) {
		// write your code here

		if(stack.isEmpty()){
			return;
		}

		int top = stack.pop();
		reverseStack(stack);
		insertAtBottom(stack, top);
		
	}

}
