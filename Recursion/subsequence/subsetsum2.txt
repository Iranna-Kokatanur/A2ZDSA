https://leetcode.com/problems/subsets-ii/description/

class Solution {

    //o(2^n * n) S.C -> o(2^n) *o(k)
    public void subsetsum2(List<Integer> list, List<List<Integer>> ans, int ind, int[] arr){
        ans.add(new ArrayList<>(list));
        // pick every element each time
        for(int i = ind; i<arr.length; i++){
            // if the previously element is picked then dont pick that element
            if(i > ind && arr[i] == arr[i-1]) continue;
            list.add(arr[i]);
            subsetsum2(list, ans, i + 1, arr);
            list.remove(list.size() - 1);
        }
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        subsetsum2(new ArrayList<>(), ans, 0, nums);
        return ans;
    }
}
