https://leetcode.com/problems/permutation-sequence/submissions/

class Solution {
    public String getPermutation(int n, int k) {

        int fact = 1;
        ArrayList<Integer> numbers = new ArrayList<>();
        // o(n) // o(n)
        // store all the numbers in the arraylist and the factorial upto n - 1
        for(int i = 1; i<n; i++){
            fact = fact * i;
            numbers.add(i);
        }
        numbers.add(n);
        //reduce k by k - 1 due to 0 base indexing
        k = k - 1;
        String ans = "";
        /**
            [1, 2, 3, 4], k = 17

            k = 17 - 1 = 16
            _ _ _ _
            // first number
            16 / 3! = 2 => find 2 number from numbers list 
            and remove this number from arraylist
            remaining 
            16 % 3! = 4

            // second number 

            X _ _ _
            4 / 2! = 0 => 0 index number in numbers list and remove it
            4 % 2! = 0

            // 3rd number

            X Y _ _

            0 / 1! = 0 => 0 index number from numbers list and remove this

            0 % !! = 0 => 

            // 4 th number =>

            X Y Z _

            0 % 0! = 0 => 0 index number from list and remove

            0 % 0! = 0 

            X Y Z P

            we need to do this step until numbers list becomes zero then break the loop
         */
        while(true){
            ans = ans + (numbers.get(k / fact) + "");
            numbers.remove(Integer.valueOf(numbers.get(k/fact)));
            if(numbers.size() == 0) break;
            k = k % fact;
            fact = fact/numbers.size();
        }

        return ans;
        
    }
}
