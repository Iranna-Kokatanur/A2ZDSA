https://leetcode.com/problems/expression-add-operators/description/

class Solution {
    private static void addOperators(List<String> list, String str, String num, int target, long curans, int ind, long prev){
        
        if(ind == num.length()){
            if(curans == target) list.add(str);
            return;
        }

        // if the number has leading zeroes break it
        // if index 0, just take the elements
        // 1 + 5 * 2 => (6 - 5) + (5 * 2) => (cur_ans - prev) +(prev * cur_ele), prev is 5
        // 1 - 5 * 2 => 1 + (-5) * 2 => (-4 -(-5)) + (-5 * 2) => prev is -5
        // 1 * 5 * 2 => (1 * 5) * 3 => (5 - 5) + 3 =>  prev is (cur_num * prev)

        String st = "";
        long cur_num = 0;
        for(int i = ind; i<num.length(); i++){
            if(i > ind && num.charAt(ind) == '0') break;
            st += num.charAt(i);
            cur_num = cur_num * 10 + (num.charAt(i) - '0');

            // ind = 0, curans = current element, prev = current element
            if(ind == 0)
                addOperators(list, st, num, target, cur_num, i + 1, cur_num);
            else{
                addOperators(list, str + "*" + st, num, target, curans - prev + (cur_num * prev), i + 1, cur_num * prev);
                addOperators(list, str + "+" + st, num, target, curans + cur_num, i + 1, cur_num);
                addOperators(list, str + "-" + st, num, target, curans - cur_num, i + 1, -cur_num);
            }
        }
    }

    
    public List<String> addOperators(String num, int target) {
        List<String> ans = new ArrayList<>();
        addOperators(ans, "", num, target, 0, 0, 0);
        return ans;
    }
}
