https://leetcode.com/problems/permutations/submissions/

class Solution {

    // tc -> o(n! * n) S.c -> o(n) + o(n)
    public static void recurPermute(List<List<Integer>> ans, List<Integer> ds, int[] nums, boolean[] freq){
        if(ds.size() == nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }

        for(int i = 0; i<nums.length; i++){
            if(!freq[i]){
                freq[i] = true;
                ds.add(nums[i]);
                recurPermute(ans, ds, nums, freq);
                ds.remove(ds.size()-1);
                freq[i] = false;
            }
        }
    }

    public static void swap(int i , int j, int[] nums){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

     // tc -> o(n! * n) S.c -> o(1)
    public static void recurPermute2(List<List<Integer>> ans, int[] nums, int ind){

        if(ind == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int num: nums){
                ds.add(num);
            }
            ans.add(new ArrayList<>(ds));

        }
        /**     
                ind = 0
                [1 2 3] -> swap(0,0) -> {1,2,3}
                        -> swap(0,1) ->  {2,1,3}
                        -> swap(0, 2) ->{3,2,1}
                continue this logic for each recursion ind + 1   
                        
                               */
        for(int i = ind; i<nums.length; i++){
            swap(ind, i, nums);
            recurPermute2(ans, nums, ind + 1);
            swap(i, ind, nums);
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        // Use boolean array and mark each element
        // boolean[] freq = new boolean[nums.length];
        // Arrays.fill(freq, false);
        // recurPermute(ans, ds, nums, freq);


        recurPermute2(ans, nums, 0);
        return ans; 
    }
}
