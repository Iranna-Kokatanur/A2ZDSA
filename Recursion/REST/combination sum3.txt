https://leetcode.com/problems/combination-sum-iii/submissions/

class Solution {

    // FIRST APPROACH
    public static void combinationsum(List<List<Integer>> list, List<Integer> ans, int[] arr, int target, int k, int ind, int sum){

        if(sum == target && ans.size() == k){
            list.add(new ArrayList<>(ans));
            return;
        }

        for(int i = ind; i<arr.length; i++){
            if(arr[i] > target) break;
            if(sum <= target && ans.size() <= k){
                ans.add(arr[i]);
                combinationsum(list, ans, arr, target, k, i+1, sum + arr[i]);
                ans.remove(ans.size()-1);
            }
        }

    }


    public void solve(List<List<Integer>> list, List<Integer> ans, int k, int n, int i){
        if(n == 0 && k == 0){
            list.add(ans);
            return;
        }

        if(i > 9) return;
        if(n < 0 || k < 0) return;

        //pick the element
        List<Integer> temp = new ArrayList<>(ans);
        temp.add(i);
        solve(list, temp, k-1, n-i, i + 1);

        // not pick the element
        solve(list, ans, k, n, i + 1);

    }


    public List<List<Integer>> combinationSum3(int k, int n) {

        // int[] arr = new int[]{1,2,3,4,5,6,7,8,9};

        List<List<Integer>> list = new ArrayList<>();

        // combinationsum(list, new ArrayList<>(), arr, n, k, 0, 0);

        // OTHER METHOD

        solve(list, new ArrayList<>(), k, n, 1);

        return list;
        
    }
}
