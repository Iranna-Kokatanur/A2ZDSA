
https://leetcode.com/problems/4sum/submissions/
class Solution {

    // Optimal Solution
    public List<List<Integer>> fourSum(int[] arr, int target){
        Arrays.sort(arr);
        List<List<Integer>> ans = new ArrayList<>();
        int n = arr.length;

        // Use Two Pointer Approach
        for(int i = 0; i<n; i++){
            // just remove the duplicates
            if(i > 0 && arr[i] == arr[i-1]) continue;
            for(int j = i + 1; j<n; j++){
                // just remove the duplicates
                if(j > i + 1 && arr[j] == arr[j-1]) continue;

                int k = j + 1;
                int l = n - 1;
                while(k < l){
                    long sum = arr[i];
                    sum += arr[j];
                    sum += arr[k];
                    sum += arr[l];

                    if(sum < target) k++;
                    else if(sum > target) l--;
                    else if(target == sum){
                        List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k], arr[l]);
                        ans.add(temp);
                        k++;
                        l--;
                        // just remove the duplicates
                        while (k < l && arr[k] == arr[k - 1]) k++;
                        while (k < l && arr[l] == arr[l + 1]) l--;
                    }
                }
            }
        }

        return ans;
    }
    
    //Better Solution
    public List<List<Integer>> fourSum(int[] arr, int target) {

        Set<List<Integer>> st = new HashSet<>();
        int n = arr.length;
        for(int i = 0; i<n; i++){
            for(int j = i + 1; j<n; j++){
                HashSet<Long> hashSet = new HashSet<>();
                for(int k = j + 1; k<n; k++){
                   long sum = arr[i] + arr[j];
                   sum += arr[k];
                   long fourth = target- sum;
                   if(hashSet.contains(fourth)){
                        List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k], (int)fourth);
                        temp.sort(null);
                        st.add(temp);  
                    }
                    hashSet.add((long)arr[k]);
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
        
    }
    
}
