https://leetcode.com/problems/3sum/submissions/

class Solution {
    public List<List<Integer>> threeSum(int[] arr) {

        Set<List<Integer>> st = new HashSet<>();

        for(int i = 0; i<arr.length;i++){
            HashSet<Integer> hashSet = new HashSet<>();
            for(int j = i+1; j<arr.length; j++){
                int third = -(arr[i] + arr[j]);
                if(hashSet.contains(third)){
                   List<Integer> temp = Arrays.asList(arr[i], arr[j], third);
                   temp.sort(null);
                   st.add(temp);  
                }
                hashSet.add(arr[j]);
            }
        }

        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;

    }
    // Two pointer approach
    // o(nlogn) + o(n * n)
    public List<List<Integer>> threeSum(int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(arr);
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            //remove duplicates:
            if (i != 0 && arr[i] == arr[i - 1]) continue;

            //moving 2 pointers:
            int j = i + 1;
            int k = n - 1;
            while (j < k)  {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    //skip the duplicates: j<k is for keeping the elements in sorted order
                    while (j < k && arr[j] == arr[j - 1]) j++;
                    while (j < k && arr[k] == arr[k + 1]) k--;
                }
            }
        }

        return ans;
    }*/
}
